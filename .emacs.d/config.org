
#+TITLE: Emacs configuration
#+AUTHOR: Mikael Zhang

* Emacs internal configuration
** Load library path ~/.emacs.d/lib/

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/lib/")
#+END_SRC

** Indent
#+BEGIN_SRC emacs-lisp
(setq tab-width 4)
#+END_SRC

** Unset Control Z

#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-z"))
#+END_SRC

** Find and replace Control C, Control s
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c C-s") 'query-replace)
#+END_SRC 

** Disable bars
Disable menu-, tool- and scroll-bar for more space
#+BEGIN_SRC emacs-lisp
;(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+END_SRC

** Truncate Lines

#+BEGIN_SRC emacs-lisp
(set-default 'truncate-line t)
#+END_SRC

** Saving Emacs Sessions - NOT IN USE
https://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Emacs-Sessions.html
#+BEGIN_SRC emacs-lisp
;;(desktop-save-mode 1)
#+END_SRC

** Don't ask follow symlinks
   https://emacs.stackexchange.com/questions/3673/how-to-make-vc-and-magit-treat-a-symbolic-link-to-a-real-file-in-git-repo-just
** AlarmBell
https://www.emacswiki.org/emacs/AlarmBell
* org-mode configuration
** Beamer org export

#+BEGIN_SRC emacs-lisp
(require 'ox-beamer)
#+END_SRC

** Support Shift Select

#+BEGIN_SRC emacs-lisp
(setq org-support-shift-select t)
#+END_SRC

** Syntax highlighting
https://orgmode.org/worg/org-contrib/babel/examples/fontify-src-code-blocks.html

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC

* org-bullets
https://github.com/sabof/org-bullets
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+END_SRC

* Theme and looks 
** Load ~/.emacs.d/themes
#+BEGIN_SRC emacs-lisp
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
#+END_SRC

** Highlight Line Mode
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode t)
#+END_SRC

** Spaceline
https://github.com/TheBB/spaceline

#+BEGIN_SRC emacs-lisp
(require 'spaceline-config)
(spaceline-emacs-theme)
#+END_SRC

* YASnippet
https://github.com/joaotavora/yasnippet
#+BEGIN_SRC emacs-lisp
  (require 'yasnippet)
  (yas-global-mode 1)
#+END_SRC

* ob-sagemath
https://github.com/stakemori/ob-sagemath

#+BEGIN_SRC emacs-lisp
  ;; Ob-sagemath supports only evaluating with a session.
  (setq org-babel-default-header-args:sage '((:session . t)
					     (:results . "output")))

  ;; C-c c for asynchronous evaluating (only for SageMath code blocks).
  (with-eval-after-load "org"
    (define-key org-mode-map (kbd "C-c c") 'ob-sagemath-execute-async))

  ;; Do not confirm before evaluation
  (setq org-confirm-babel-evaluate nil)

  ;; Show images when opening a file.
  (setq org-startup-with-inline-images t)
#+END_SRC

** Sage-shell-mode derived

#+BEGIN_SRC emacs-lisp

#+END_SRC

https://www.gnu.org/software/emacs/manual/html_node/elisp/Derived-Modes.html

#+BEGIN_SRC emacs-lisp
  (define-derived-mode sage-mode sage-shell-mode "sage-block mode")
  (provide 'sage-mode)
#+END_SRC

* auto-complete
https://github.com/auto-complete/auto-complete
#+BEGIN_SRC emacs-lisp
(ac-config-default)
#+END_SRC

** auto-complete-sage
https://github.com/stakemori/auto-complete-sage
#+BEGIN_SRC emacs-lisp
(add-hook 'sage-shell:sage-mode-hook 'ac-sage-setup)
(add-hook 'sage-shell-mode-hook 'ac-sage-setup)
;; Show quick help
(setq ac-sage-show-quick-help t)
#+END_SRC

* Magit
https://github.com/magit/magit
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC

* Emacs-dashboard
https://github.com/rakanalh/emacs-dashboard

#+BEGIN_SRC emacs-lisp
  (require 'dashboard)
  (dashboard-setup-startup-hook)

  ;; Fix emacsclient. Switch on new frame
  ;; Don't switch to dashboard if trying to open file
  (defun switch-to-dashboard(frame)
    (with-selected-frame frame
      (run-with-timer 0.1 nil (lambda()
                                (switch-to-buffer "*dashboard*")))))

  (if (< (length command-line-args) 2 )
      (add-hook 'after-make-frame-functions 'switch-to-dashboard))

  ;;(setq dashboard-items '((recents  . 5)
  ;;                        (bookmarks . 5)))
  (setq dashboard-items '((recents . 5)))
#+END_SRC

* Beacon
https://github.com/Malabarba/beacon
#+BEGIN_SRC emacs-lisp
(beacon-mode 1)
#+END_SRC

* linum-relative
https://github.com/coldnew/linum-relative

#+BEGIN_SRC emacs-lisp
  (require 'linum-relative)
  (global-set-key (kbd "C-<f9>") 'linum-relative-toggle)
#+END_SRC

* Helm
** Find files
Set C-h C-f

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-h C-f") 'helm-find-files)
#+END_SRC

* God-mode

https://github.com/chrisdone/god-mode

#+BEGIN_SRC emacs-lisp
  (require 'god-mode)

  ;; Set ½ as toggle
  (global-set-key (kbd "C-½") 'god-mode-all)

  ;; If you are using the global mode, you might want to make no buffers exempt
  (setq god-exempt-major-modes nil)
  (setq god-exempt-predicates nil)
#+END_SRC

* Emacs X Window Manager - Manual Load
https://github.com/ch11ng/exwm

https://github.com/ch11ng/exwm/wiki/Configuration-Example

** Initialisation
Including Buffer move: https://github.com/lukhas/buffer-move

Manual load with (load-exwm)

#+BEGIN_SRC emacs-lisp
  (defun load-exwm()
    (interactive)
    ;; You may want Emacs to show you the time
    (setq display-time-default-load-average nil)
    (display-time-mode t)

    ;; Emacs server is not required to run EXWM but it has some interesting uses
    ;; (see next section)
    (server-start)
    
    ;;;; Below are configurations for EXWM

    ;; Load EXWM
    (require 'exwm)

    ;; Fix problems with Ido
    (require 'exwm-config)
    (exwm-config-ido)

    ;; Set the initial number of workspaces.
    (setq exwm-workspace-number 10)

    ;; All buffers created in EXWM mode are named "*EXWM*". You may want to change
    ;; it in `exwm-update-class-hook' and `exwm-update-title-hook', which are run
    ;; when a new window class name or title is available. Here's some advice on
    ;; this subject:
    ;; + Always use `exwm-workspace-rename-buffer` to avoid naming conflict.
    ;; + Only renaming buffer in one hook and avoid it in the other. There's no
    ;;   guarantee on the order in which they are run.
    ;; + For applications with multiple windows (e.g. GIMP), the class names of all
    ;;   windows are probably the same. Using window titles for them makes more
    ;;   sense.
    ;; + Some application change its title frequently (e.g. browser, terminal).
    ;;   Its class name may be more suitable for such case.
    ;; In the following example, we use class names for all windows expect for
    ;; Java applications and GIMP.
    (add-hook 'exwm-update-class-hook
              (lambda ()
                (unless (or (string-prefix-p "sun-awt-X11-" exwm-instance-name)
                            (string= "gimp" exwm-instance-name))
                  (exwm-workspace-rename-buffer exwm-class-name))))
    (add-hook 'exwm-update-title-hook
              (lambda ()
                (when (or (not exwm-instance-name)
                          (string-prefix-p "sun-awt-X11-" exwm-instance-name)
                          (string= "gimp" exwm-instance-name))
                  (exwm-workspace-rename-buffer exwm-title))))
    ;;;; STARTUP APPS
    (shell-command "setxkbmap -layout dk,gb -option grp:alt_shift_toggle")
    ;;;; KEYBINDS

    ;; `exwm-input-set-key' allows you to set a global key binding (available in
    ;; any case). Following are a few examples.
    ;; + We always need a way to go back to line-mode from char-mode
    (exwm-input-set-key (kbd "s-r") #'exwm-reset)
    ;; + Bind a key to switch workspace interactively
    (exwm-input-set-key (kbd "s-w") #'exwm-workspace-switch)
    ;; + Bind "s-0" to "s-9" to switch to the corresponding workspace.
    (dotimes (i 10)
      (exwm-input-set-key (kbd (format "s-%d" i))
                          `(lambda ()
                             (interactive)
                             (exwm-workspace-switch-create ,i))))
    ;; + Application launcher ('M-&' also works if the output buffer does not
    ;;   bother you). Note that there is no need for processes to be created by
    ;;   Emacs.
    (exwm-input-set-key (kbd "s-d")
                        (lambda () (interactive) (counsel-linux-app)))
    ;; + 'slock' is a simple X display locker provided by suckless tools.
    (exwm-input-set-key (kbd "s-<f2>")
                        (lambda () (interactive) (start-process "" nil "slock")))

    ;; The following example demonstrates how to set a key binding only available
    ;; in line mode. It's simply done by first push the prefix key to
    ;; `exwm-input-prefix-keys' and then add the key sequence to `exwm-mode-map'.
    ;; The example shorten 'C-c q' to 'C-q'.
    (push ?\C-q exwm-input-prefix-keys)
    (define-key exwm-mode-map [?\C-q] #'exwm-input-send-next-key)

    ;; The following example demonstrates how to use simulation keys to mimic the
    ;; behavior of Emacs. The argument to `exwm-input-set-simulation-keys' is a
    ;; list of cons cells (SRC . DEST), where SRC is the key sequence you press and
    ;; DEST is what EXWM actually sends to application. Note that SRC must be a key
    ;; sequence (of type vector or string), while DEST can also be a single key.
    ;;(exwm-input-set-simulation-keys
    ;; '(
    ;; movement
    ;;     ([?\C-b] . left)
    ;;     ([?\M-b] . C-left)
    ;;     ([?\C-f] . right)
    ;;     ([?\M-f] . C-right)
    ;;     ([?\C-p] . up)
    ;;     ([?\C-n] . down)
    ;;     ([?\C-a] . home)
    ;;     ([?\C-e] . end)
    ;;     ([?\M-v] . prior)
    ;;     ([?\C-v] . next)
    ;;     ([?\C-d] . delete)
    ;;     ([?\C-k] . (S-end delete))
    ;; cut/paste.
    ;;     ([?\C-w] . ?\C-x)
    ;;     ([?\M-w] . ?\C-c)
    ;;     ([?\C-y] . ?\C-v)))
    ;; search
    ;;     ([?\C-s] . ?\C-f))
    (exwm-enable)
    ;;;; Buffer move: https://github.com/lukhas/buffer-move
    (require 'buffer-move)
    (exwm-input-set-key (kbd "s-S-<right>") 'buf-move-right)
    (exwm-input-set-key (kbd "s-S-<left>") 'buf-move-left)
    (exwm-input-set-key (kbd "s-S-<up>") 'buf-move-up))
#+END_SRC

* Ace-window

https://github.com/abo-abo/ace-window

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-o") 'ace-window)
#+END_SRC

* Multiple cursors
https://github.com/magnars/multiple-cursors.el
#+BEGIN_SRC emacs-lisp
(require 'multiple-cursors)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-;") 'mc/mark-all-like-this)
#+END_SRC

* Haskell-mode
http://haskell.github.io/haskell-mode/manual/latest/Editing-Haskell-Code.html#Editing-Haskell-Code

** Haskell-navigate-import
Bind to f8
#+BEGIN_SRC emacs-lisp
  (eval-after-load 'haskell-mode
    '(define-key haskell-mode-map [f8] 'haskell-navigate-imports))
#+END_SRC

** Haskell tags
https://github.com/MarcWeber/hasktags
Requires hasktags

* Intero
https://github.com/commercialhaskell/intero

Requires Stack

* Swiper
https://github.com/abo-abo/swiper

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-s") 'swiper)
  (global-set-key (kbd "C-S-s") 'isearch-forward)
#+END_SRC

* Ivy
https://github.com/abo-abo/swiper

#+BEGIN_SRC emacs-lisp
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t)
  (global-set-key (kbd "C-c C-r") 'ivy-resume)
#+END_SRC

* Counsel
https://github.com/abo-abo/swiper

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  (global-set-key (kbd "<f1> f") 'counsel-describe-function)
  (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
  (global-set-key (kbd "<f1> l") 'counsel-find-library)
  (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
  (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
  (global-set-key (kbd "C-c g") 'counsel-git)
  (global-set-key (kbd "C-c j") 'counsel-git-grep)
  (global-set-key (kbd "C-c k") 'counsel-ag)
  (global-set-key (kbd "C-x l") 'counsel-locate)
  (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
  (global-set-key (kbd "M-y") 'counsel-yank-pop)
  (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-histor)
#+END_SRC

* Undo Tree
https://www.emacswiki.org/emacs/UndoTree

#+BEGIN_SRC emacs-lisp
  (global-undo-tree-mode)
#+END_SRC

* Aggressive Indent Mode
https://github.com/Malabarba/aggressive-indent-mode

#+BEGIN_SRC emacs-lisp
  (global-aggressive-indent-mode 1)
  (add-to-list 'aggressive-indent-excluded-modes 'haskell-mode)
#+END_SRC

* Expand Region
https://github.com/magnars/expand-region.el

#+BEGIN_SRC emacs-lisp
(require 'expand-region)
(global-set-key (kbd "C-=") 'er/expand-region)
#+END_SRC

* Git Gutter
https://github.com/syohex/emacs-git-gutter
#+begin_src emacs-lisp
  (global-git-gutter-mode +1)
  (global-set-key (kbd "C-x p") 'git-gutter:previous-hunk)
  (global-set-key (kbd "C-x n") 'git-gutter:next-hunk)
  (global-set-key (kbd "C-x v s") 'git-gutter:stage-hunk)
  (global-set-key (kbd "C-x v r") 'git-gutter:revert-hunk)
  (global-set-key (kbd "C-x v SPC") #'git-gutter:mark-hunk)
#+end_src

* Projectile
https://github.com/bbatsov/projectile
#+BEGIN_SRC emacs-lisp
  (projectile-global-mode)
#+END_SRC

* Counsel Projectile
https://github.com/ericdanan/counsel-projectile

* Dump-jump - Manual Load
https://github.com/jacktasia/dumb-jump
#+BEGIN_SRC emacs-lisp
  (defun load-dump-jump()
    (interactive)
    (dumb-jump-mode)
    (global-set-key (kbd "M-g o") dumb-jump-go-other-window)
    (global-set-key (kbd "M-g j") dumb-jump-go)
    (global-set-key (kbd "M-g i") dumb-jump-go-prompt) 
    (global-set-key (kbd "M-g x") dumb-jump-go-prefer-external)  
    (global-set-key (kbd "M-g z") dumb-jump-go-prefer-external-other-window))
#+END_SRC

* IBuffer
https://www.emacswiki.org/emacs/IbufferMode
http://martinowen.net/blog/2010/02/03/tips-for-emacs-ibuffer.html
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (setq ibuffer-saved-filter-groups
	'(("home"
	   ("dired" (mode . dired-mode))
	   ("org" (name . "^.*org$"))
	   ("web" (or (mode . web-mode) (mode . js2-mode)))
	   ("shell" (or (mode . eshell-mode) (mode . shell-mode)))
	   ("mu4e" (name . "\*mu4e\*"))
	   ("programming" (or
			   (mode . python-mode)
			   (mode . c++-mode)
			   (mode . haskell-mode)
			   (mode . emacs-lisp-mode)))
	   ("emacs" (or
		     (name . "^\\*scratch\\*$")
		     (name . "^\\*Messages\\*$")))
	   )))
  (add-hook 'ibuffer-mode-hook
	    '(lambda ()
	       (ibuffer-auto-mode 1)
	       (ibuffer-switch-to-saved-filter-groups "home")))
#+END_SRC

* Smartparens
https://github.com/Fuco1/smartparens

#+BEGIN_SRC emacs-lisp
  (require 'smartparens-config)
#+END_SRC

* OneKey - CAN'T GET TO WORK
https://www.emacswiki.org/emacs/OneKey

#+BEGIN_SRC emacs-lisp
  ;(require 'one-key)
  ;(global-set-key (kbd "<f10>") 'one-key-open-associated-menu-set)
#+END_SRC

* Flycheck
http://www.flycheck.org/en/latest/

#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook #'global-flycheck-mode)
#+END_SRC

* HideShow
https://www.emacswiki.org/emacs/HideShow

#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'hs-minor-mode)
#+END_SRC

* All the Icons
https://github.com/domtronn/all-the-icons.el
#+begin_src emacs-lisp
  (require 'all-the-icons)
#+end_src

* Structed-haskell-mode - INACTIVE
https://github.com/chrisdone/structured-haskell-mode

*NOTE* Requires happy to install
#+BEGIN_SRC sh
  cabal install happy
#+END_SRC

Currently inactive due to: https://github.com/chrisdone/structured-haskell-mode/issues/156
#+BEGIN_SRC emacs-lisp
  ;(add-to-list 'load-path "~/.emacs.d/lib/structured-haskell-mode")
  ;(require 'shm)
  ;(add-hook 'haskell-mode-hook 'structed-haskell-mode)
#+END_SRC

* hindent
https://github.com/commercialhaskell/hindent

#+BEGIN_SRC emacs-lisp
  (require 'hindent)
  (add-hook 'haskell-mode-hook #'hindent-mode)
#+END_SRC

* GHC-mod
https://github.com/DanielG/ghc-mod

#+BEGIN_SRC emacs-lisp
  (add-hook 'haskell-mode-hook (lambda () (ghc-init)))
#+END_SRC

* Company-mode
https://company-mode.github.io/
https://github.com/serras/emacs-haskell-tutorial/blob/master/tutorial.md#completion-with-company-ghc

#+BEGIN_SRC emacs-lisp
  (require 'company)
  (add-to-list 'haskell-mode-hook 'company-mode)

#+END_SRC

* Company GHC
https://github.com/iquiw/company-ghc

*NOTE* Must be installed with cabal at the moment. Stack version does not support newer version of packages.
#+BEGIN_SRC sh
  cabal install ghc-mod
#+END_SRC

*OPTIONAL* Hoogle
#+BEGIN_SRC sh
  stack install hoogle
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (add-to-list 'company-backends 'company-ghc)
#+END_SRC

* Anzu
https://github.com/syohex/emacs-anzu

#+BEGIN_SRC emacs-lisp
(global-anzu-mode +1)
#+END_SRC

* 
