
* Emacs internal configuration
** Load library path ~/.emacs.d/lib/

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/lib/")
#+END_SRC

** Indent
#+BEGIN_SRC emacs-lisp
(setq tab-width 4)
#+END_SRC

** Unset Control Z

#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-z"))
#+END_SRC

** Disable bars
Disable menu-, tool- and scroll-bar for more space
#+BEGIN_SRC emacs-lisp
;(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+END_SRC

* Misc
Dash
* org-mode
#+BEGIN_SRC emacs-lisp
(use-package org
  :ensure t
  :init
  (setq org-support-shift-select t)
  ;;https://orgmode.org/worg/org-contrib/babel/examples/fontify-src-code-blocks.html
  (setq org-src-fontify-natively t)
  ;;LaTeX-pdf output on F10
  (org-defkey org-mode-map [f10] 'org-latex-export-to-pdf)
)
#+END_SRC

* ox-beamer
#+BEGIN_SRC emacs-lisp
(use-package ox-beamer)
#+END_SRC

* org-bullets
https://github.com/sabof/org-bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :hook (org-mode-hook . (lambda () (org-bullets-mode 1))))
#+END_SRC

* Theme and looks 
** Load ~/.emacs.d/themes
#+BEGIN_SRC emacs-lisp
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
#+END_SRC

** Leuven-theme
https://github.com/fniessen/emacs-leuven-theme
#+BEGIN_SRC emacs-lisp
(use-package leuven-theme
  :ensure t)
#+END_SRC

** Highlight Line Mode
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode t)
#+END_SRC

** Spaceline
https://github.com/TheBB/spaceline

#+BEGIN_SRC emacs-lisp
(use-package spaceline
  :ensure t
  :init
  (require 'spaceline-config)
  (spaceline-emacs-theme)
  (setq powerline-default-separator nil)
  (spaceline-compile))
#+END_SRC

* YASnippet
https://github.com/joaotavora/yasnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :init
  (yas-global-mode 1))
(use-package yasnippet-snippets
  :ensure t)
#+END_SRC

* ob-sagemath
  https://github.com/stakemori/ob-sagemath

#+BEGIN_SRC emacs-lisp
(use-package ob-sagemath
  :ensure t
  :init
  ;; Ob-sagemath supports only evaluating with a session.
  (setq org-babel-default-header-args:sage '((:session . t)
					     (:results . "output")))

  ;; C-c c for asynchronous evaluating (only for SageMath code blocks).
  (with-eval-after-load "org"
    (define-key org-mode-map (kbd "C-c c") 'ob-sagemath-execute-async))

  ;; Do not confirm before evaluation
  (setq org-confirm-babel-evaluate nil)

  ;; Show images when opening a file.
  (setq org-startup-with-inline-images t))
#+END_SRC

** Sage-shell-mode derived

#+BEGIN_SRC emacs-lisp

#+END_SRC

https://www.gnu.org/software/emacs/manual/html_node/elisp/Derived-Modes.html

#+BEGIN_SRC emacs-lisp
  (define-derived-mode sage-mode sage-shell-mode "sage-block mode")
  (provide 'sage-mode)
#+END_SRC

* Sage-shell-mode
#+BEGIN_SRC emacs-lisp
(use-package sage-shell-mode
  :ensure t)
#+END_SRC

* auto-complete
https://github.com/auto-complete/auto-complete
#+BEGIN_SRC emacs-lisp
(use-package auto-complete
  :ensure t
  :init
  (ac-config-default)
)

#+END_SRC

** auto-complete-sage
https://github.com/stakemori/auto-complete-sage
#+BEGIN_SRC emacs-lisp
(use-package auto-complete-sage
  :ensure t
  :init
  (add-hook 'sage-shell:sage-mode-hook 'ac-sage-setup)
  (add-hook 'sage-shell-mode-hook 'ac-sage-setup)
  ;; Show quick help
  (setq ac-sage-show-quick-help t)
)
#+END_SRC

* Magit
https://github.com/magit/magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :commands (magit-status)
  :bind ("C-x g" . magit-status))
#+END_SRC

* Emacs-dashboard
https://github.com/rakanalh/emacs-dashboard

#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :ensure t
  :init
  (dashboard-setup-startup-hook)
  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
  (setq dashboard-items '((recents . 5))))
#+END_SRC

* Beacon
https://github.com/Malabarba/beacon
#+BEGIN_SRC emacs-lisp
(use-package beacon
  :ensure t
  :init
  (beacon-mode 1)
)
#+END_SRC

* linum-relative
https://github.com/coldnew/linum-relative

#+BEGIN_SRC emacs-lisp
(use-package linum-relative
  :ensure t
  :commands linum-relative-toggle
  :bind ("C-<f9>" . linum-relative-toggle))
#+END_SRC

* Helm
https://github.com/emacs-helm/helm/wiki#install
#+BEGIN_SRC emacs-lisp
(use-package helm
  :ensure t
)
#+END_SRC

** Find files
Set C-h C-f

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-h C-f") 'helm-find-files)
#+END_SRC

* God-mode

https://github.com/chrisdone/god-mode

#+BEGIN_SRC emacs-lisp
(use-package god-mode
  :ensure t
  :commands god-mode-all
  ;; Set ½ as toggle
  :bind ("C-½" . god-mode-all)
  :init
  ;; If you are using the global mode, you might want to make no buffers exempt
  (setq god-exempt-major-modes nil)
  (setq god-exempt-predicates nil))
#+END_SRC

* Ace-window

https://github.com/abo-abo/ace-window

#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :ensure t
  :commands (ace-window)
  :bind ("M-o" . ace-window))
#+END_SRC

* Multiple cursors
https://github.com/magnars/multiple-cursors.el
#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors 
  :ensure t
  :commands (mc/mark-next-like-this mc/mark-previous-like-this mc/mark-all-like-this)
  :bind (("C->" . mc/mark-next-like-this)
         ("C-<" . mc/mark-previous-like-this)
	 ("C-;" . mc/mark-all-like-this)))
#+END_SRC

* Swiper
https://github.com/abo-abo/swiper

#+BEGIN_SRC emacs-lisp
(use-package swiper
  :ensure t
  :commands swiper
  :bind (("C-s" . swiper)
         ("C-S-s" . isearch-forward)))
#+END_SRC

* Ivy
https://github.com/abo-abo/swiper

#+BEGIN_SRC emacs-lisp
(use-package ivy
  :ensure t
  :commands ivy-resume
  :bind ("C-c C-r" . ivy-resume)
  :init
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t))
#+END_SRC

* Counsel
https://github.com/abo-abo/swiper

#+BEGIN_SRC emacs-lisp
(use-package counsel
  :ensure t
  :commands (counsel-M-x counsel-find-file counsel-describe-function counsel-describe-variable counsel-find-library counsel-info-lookup-symbol counsel-unicode-char counsel-git counsel-git-grep counsel-ag counsel-locate counsel-rhythmbox counsel-yank-pop)
  :bind (("M-x" . counsel-M-x)
         ("C-x C-f" . counsel-find-file)
         ("<f1> f" . counsel-describe-function)
         ("<f1> v" . counsel-describe-variable)
         ("<f1> l" . counsel-find-library)
         ("<f2> i" . counsel-info-lookup-symbol)
         ("<f2> u" . counsel-unicode-char)
         ("C-c g" . counsel-git)
         ("C-c j" . counsel-git-grep)
         ("C-c k" . counsel-ag)
         ("C-x l" . counsel-locate)
         ("C-S-o" . counsel-rhythmbox)
         ("M-y" . counsel-yank-pop))
  :init
  (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history))
#+END_SRC

* Undo Tree
https://www.emacswiki.org/emacs/UndoTree

#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :ensure t
  :init
  (global-undo-tree-mode))
#+END_SRC

* Aggressive Indent Mode
https://github.com/Malabarba/aggressive-indent-mode

#+BEGIN_SRC emacs-lisp
(use-package aggressive-indent
  :ensure t
  :init 
  (global-aggressive-indent-mode 1)
  (add-to-list 'aggressive-indent-excluded-modes 'haskell-mode))
#+END_SRC

* Expand Region
https://github.com/magnars/expand-region.el

#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :ensure t
  :commands er/expand-region
  :bind ("C-=" . er/expand-region))
#+END_SRC

* Git Gutter
https://github.com/syohex/emacs-git-gutter
#+begin_src emacs-lisp
(use-package git-gutter
  :ensure t
  :commands (git-gutter:previous-hunk git-gutter:next-hunk git-gutter:stage-hunk git-gutter:revert-hunk git-gutter:mark-hunk)
  :bind (("C-x p" . git-gutter:previous-hunk)
         ("C-x n" . git-gutter:next-hunk)
         ("C-x v s" . git-gutter:stage-hunk)
         ("C-x v r" . git-gutter:revert-hunk)
         ("C-x v SPC" . git-gutter:mark-hunk))
  :init
  (global-git-gutter-mode +1))
#+end_src

* Git Timemachine
#+BEGIN_SRC emacs-lisp
(use-package git-timemachine
  :ensure t)
#+END_SRC

* Projectile
https://github.com/bbatsov/projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :init
  (projectile-global-mode))
#+END_SRC

* IBuffer
https://www.emacswiki.org/emacs/IbufferMode
http://martinowen.net/blog/2010/02/03/tips-for-emacs-ibuffer.html
#+BEGIN_SRC emacs-lisp
(use-package ibuffer-git
  :ensure t
  :commands ibuffer
  :bind ("C-x C-b" . ibuffer)
  :hook (ibuffer-mode-hook . (lambda ()
	       (ibuffer-auto-mode 1)
	       (ibuffer-switch-to-saved-filter-groups "home")))
  :init
  (setq ibuffer-saved-filter-groups
	'(("home"
	   ("dired" (mode . dired-mode))
	   ("org" (name . "^.*org$"))
	   ("web" (or (mode . web-mode) (mode . js2-mode)))
	   ("shell" (or (mode . eshell-mode) (mode . shell-mode)))
	   ("mu4e" (name . "\*mu4e\*"))
	   ("programming" (or
			   (mode . python-mode)
			   (mode . c++-mode)
			   (mode . haskell-mode)
			   (mode . emacs-lisp-mode)))
	   ("emacs" (or
		     (name . "^\\*scratch\\*$")
		     (name . "^\\*Messages\\*$")))
	   ))))
#+END_SRC

* Smartparens
https://github.com/Fuco1/smartparens

#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :ensure t
  :init
  (require 'smartparens-config))
#+END_SRC

* Flycheck
http://www.flycheck.org/en/latest/

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :hook (after-init-hook . global-flycheck-mode))
#+END_SRC

* All the Icons
https://github.com/domtronn/all-the-icons.el
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
  :ensure t 
  :requires (all-the-icons-dired all-the-icons-gnus all-the-icons-ivy))
#+END_SRC

* Anzu
https://github.com/syohex/emacs-anzu

#+BEGIN_SRC emacs-lisp
(use-package anzu
  :ensure t
  :init
  (global-anzu-mode +1)
)

#+END_SRC

* Rainbow Delimiters
https://www.emacswiki.org/emacs/RainbowDelimiters

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :hook ((prog-mode-hook . rainbow-delimiters-mode)
         (org-mode-hook . rainbow-delimiters-mode)))
#+END_SRC

* Rainbow-mode
#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :ensure t)
#+END_SRC

* Org-ref
https://github.com/jkitchin/org-ref

#+BEGIN_SRC emacs-lisp
  (use-package org-ref
    :ensure t)
#+END_SRC

* ox-hugo
https://github.com/kaushalmodi/ox-hugo

#+BEGIN_SRC emacs-lisp
(use-package ox-hugo
  :ensure t
  :after ox)
#+END_SRC

* helm-org-rifle 
https://github.com/alphapapa/helm-org-rifle

#+BEGIN_SRC emacs-lisp
(use-package helm-org-rifle
  :ensure t)
#+END_SRC

* lsp-mode
https://github.com/emacs-lsp/lsp-mode
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :ensure t)
#+END_SRC
** lsp-ui
https://github.com/emacs-lsp/lsp-ui
#+BEGIN_SRC emacs-lisp
(use-package lsp-ui
  :ensure t
  :hook (lsp-mode-hook . lsp-ui-mode)
)
#+END_SRC
** lsp-haskell
https://github.com/haskell/haskell-ide-engine
https://github.com/emacs-lsp/lsp-haskell

#+BEGIN_SRC emacs-lisp
(use-package lsp-haskell
  :ensure t
  :hook ((haskell-mode-hook . lsp-haskell-enable)
         (haskell-mode-hook . flycheck-mode)))
#+END_SRC

** lsp-python
https://github.com/emacs-lsp/lsp-python

#+BEGIN_SRC emacs-lisp
(use-package lsp-python
  :ensure t
  :hook (python-mode-hook . lsp-python-enable))
#+END_SRC

* flyspell
https://www.emacswiki.org/emacs/FlySpell
https://manuel-uberti.github.io/emacs/2016/06/06/spellchecksetup/

#+BEGIN_SRC emacs-lisp
  (setq ispell-program-name (executable-find "hunspell")
	ispell-local-dictionary "en_GB")
  (bind-key "C-c i"
	    (lambda ()
	      (interactive)
	      (if (equal ispell-local-dictionary "en_GB")
		  (ispell-change-dictionary "da_DK")
		(ispell-change-dictionary "en_GB"))
	      (flyspell-buffer)))
  (add-to-list 'ispell-skip-region-alist '("^#+BEGIN_SRC" . "^#+END_SRC"))
  (add-hook 'org-mode-hook 'flyspell-mode)
#+END_SRC

Install hunspell-en_GB and hunspell-da. 
* flyspell-correct
https://github.com/d12frosted/flyspell-correct

#+BEGIN_SRC emacs-lisp
(use-package flyspell-correct-ivy
  :ensure t
  :after flyspell
  :bind (:map flyspell-mode-map
              ("C-." . flyspell-correct-word-generic)))
#+END_SRC

* imenu-list
https://www.emacswiki.org/emacs/ImenuMode
https://jblevins.org/log/markdown-imenu
https://github.com/bmag/imenu-list

#+BEGIN_SRC emacs-lisp
(use-package imenu-list 
  :ensure t
  :commands (imenu-list-smart-toggle)
  :bind ("<f7>" . imenu-list-smart-toggle)
  :init 
  (setq imenu-auto-rescan t)
  (add-hook 'org-mode-hook 'imenu-add-menubar-index))
#+END_SRC

* racket-mode
https://github.com/greghendershott/racket-mode
#+BEGIN_SRC emacs-lisp
(use-package racket-mode
  :ensure t)
#+END_SRC

* 
