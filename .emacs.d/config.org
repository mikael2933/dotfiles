
#+TITLE: Emacs configuration
#+AUTHOR: Mikael Zhang

* Emacs internal configuration
** Indent
#+BEGIN_SRC emacs-lisp
(setq tab-width 4)
#+END_SRC
** Unset Control Z
#+BEGIN_SRC emacs0a0 inherit0a0https://www.gnu.org/software/emacs/manual/html_node/elisp/Derived-Modes.htmla04a0a0a0404-l(d(defface org-block-begin-line
  '((t (:underlinEAEAFFe "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF")))
  "Face used for the line delimiting the begin of source blocks.")

(defface org-block-background
  '((t (:background "#FFFFEA")))
  "Face used for the source block background.")
(defface org-block-begin-line
  '((t (:underline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF")))
  "Face used for the line delimiting the begin of source blocks.")

(defface org-block-background
  '((t (:background "#FFFFEA")))
  "Face used for the source block background.")
ef(defface org-block-begin-line
  '((t (:underline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF")))
  "Face used for the line delimiting the begin of source blocks.")

(defface org-block-background
  '((t (:background "#FFFFEA")))
  "Face used for the source block background.")
face org-block-begin-line
  '((t (:underline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF")))
  "Face used for the line delimiting the begin of source blocks.")

(defface org-block-background
  '((t (:background "#FFFFEA")))
  "Face used for the source block background.")
isqu`(org-block-background ((,class (:background "#FFFFE0")))) ;; :inherit fixed-pitch))))
   `(org-block-begin-line ((,class (:underline "#A7A6AA" :foreground "#555555" :background "#E2E1D5"))))
   `(org-block-end-line ((,class (:overline "#A7A6AA" :foreground "#555555" :background "#E2E1D5"))))ery-replacep
(global-unset-key (kbd "C-z"))
#+END_SRC

** Find and replace Control C, Control s
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c C-s") 'query-replace)
#+END_SRC 
* org-mode configuration
** Beamer org export

#+BEGIN_SRC emacs-lisp
(require 'ox-beamer)
#+END_SRC

** Support Shift Select

#+BEGIN_SRC emacs-lisp
(setq org-support-shift-select t)
#+END_SRC

** Saving Emacs Sessions - NOT IN USE
https://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Emacs-Sessions.html
#+BEGIN_SRC emacs-lisp
;;(desktop-save-mode 1)
#+END_SRC
** Syntax highlighting
https://orgmode.org/worg/org-contrib/babel/examples/fontify-src-code-blocks.html

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC
* org-bullets
https://github.com/sabof/org-bullets
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+END_SRC
* Themes 
** Load ~/.emacs.d/themes
#+BEGIN_SRC emacs-lisp
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
#+END_SRC
** doom-themes - NOT IN USE
https://github.com/hlissner/emacs-doom-themes#install
#+BEGIN_SRC emacs-lisp
;(require 'doom-themes)
;(load-theme 'doom-spacegrey t)
#+END_SRC

** Tomorrow Night Bright - NOT IN USE
#+BEGIN_SRC emacs-lisp
;;(load-theme 'sanityinc-tomorrow-bright t)
#+END_SRC
** (Built in) Manoj dark - NOT IN USE
#+BEGIN_SRC emacs-lisp
;;(load-theme 'manoj-dark t)
#+END_SRC
** Custom Manoj dark
Modified version of original manoj dark theme.
#
#+BEGIN_SRC emacs-lisp
(load-theme 'custom-manoj-dark t)
#+END_SRC

* YASnippet
https://github.com/joaotavora/yasnippet
#+BEGIN_SRC emacs-lisp
(require 'yasnippet)
(yas-reload-all)
;;Add hook for prog-mode and org-mode
(add-hook 'prog-mode-hook #'yas-minor-mode)
(add-hook 'org-mode-hook #'yas-minor-mode)
(add-hook 'latex-mode-hook #'yas-minor-mode)
#+END_SRC
* FlySpell
* ob-sagemath
https://github.com/stakemori/ob-sagemath

#+BEGIN_SRC emacs-lisp
  ;; Ob-sagemath supports only evaluating with a session.
  (setq org-babel-default-header-args:sage '((:session . t)
                                             (:results . "output")))

  ;; C-c c for asynchronous evaluating (only for SageMath code blocks).
  (with-eval-after-load "org"
    (define-key org-mode-map (kbd "C-c c") 'ob-sagemath-execute-async))

  ;; Do not confirm before evaluation
  (setq org-confirm-babel-evaluate nil)

  ;; Show images when opening a file.
  (setq org-startup-with-inline-images t)
#+END_SRC

** Sage-shell-mode derived

#+BEGIN_SRC emacs-lisp

#+END_SRC

https://www.gnu.org/software/emacs/manual/html_node/elisp/Derived-Modes.html

#+BEGIN_SRC emacs-lisp
  (define-derived-mode sage-mode sage-shell-mode "sage-block mode")
  (provide 'sage-mode)
#+END_SRC

* auto-complete
https://github.com/auto-complete/auto-complete
#+BEGIN_SRC emacs-lisp
(ac-config-default)
#+END_SRC
** auto-complete-sage
https://github.com/stakemori/auto-complete-sage
#+BEGIN_SRC emacs-lisp
(add-hook 'sage-shell:sage-mode-hook 'ac-sage-setup)
(add-hook 'sage-shell-mode-hook 'ac-sage-setup)
;; Show quick help
(setq ac-sage-show-quick-help t)
#+END_SRC
* Magit
https://github.com/magit/magit
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC
* Emacs-dashboard
https://github.com/rakanalh/emacs-dashboard

#+BEGIN_SRC emacs-lisp
(require 'dashboard)
(dashboard-setup-startup-hook)
;;(setq dashboard-items '((recents  . 5)
;;                        (bookmarks . 5)))

(setq dashboard-items '((recents  . 5)))
#+END_SRC
* Beacon
https://github.com/Malabarba/beacon
#+BEGIN_SRC emacs-lisp
(beacon-mode 1)
#+END_SRC
* linum-relative
https://github.com/coldnew/linum-relative

#+BEGIN_SRC emacs-lisp
(require 'linum-relative)
;; Use `display-line-number-mode` as linum-mode's backend for smooth performance
(setq linum-relative-backend 'display-line-numbers-mode)
#+END_SRC

* Treemacs
https://github.com/Alexander-Miller/treemacs
* Emacs X Window Manager
https://github.com/ch11ng/exwm

https://github.com/ch11ng/exwm/wiki/Configuration-Example
#+BEGIN_SRC emacs-lisp
;; Disable menu-bar, tool-bar and scroll-bar to increase the usable space
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)

;; Shrink fringes to 1 pixel
(fringe-mode 1)

;; You may want Emacs to show you the time
(setq display-time-default-load-average nil)
(display-time-mode t)

;; You are strongly encouraged to enable `ido-mode' (or something similar) to
;; alter to default behavior of 'C-x b', or you will take great pains to switch
;; to or back from a floating frame (remember 'C-x 5 o' if you refuse this
;; proposal however)
;; You may also want to call `exwm-config-ido' later (see below)
(ido-mode 1)

;; Emacs server is not required to run EXWM but it has some interesting uses
;; (see next section)
(server-start)

;;;; Below are configurations for EXWM

;; Load EXWM
(require 'exwm)

;; Fix problems with Ido
(require 'exwm-config)
(exwm-config-ido)

;; Set the initial number of workspaces.
(setq exwm-workspace-number 10)

;; All buffers created in EXWM mode are named "*EXWM*". You may want to change
;; it in `exwm-update-class-hook' and `exwm-update-title-hook', which are run
;; when a new window class name or title is available. Here's some advice on
;; this subject:
;; + Always use `exwm-workspace-rename-buffer` to avoid naming conflict.
;; + Only renaming buffer in one hook and avoid it in the other. There's no
;;   guarantee on the order in which they are run.
;; + For applications with multiple windows (e.g. GIMP), the class names of all
;;   windows are probably the same. Using window titles for them makes more
;;   sense.
;; + Some application change its title frequently (e.g. browser, terminal).
;;   Its class name may be more suitable for such case.
;; In the following example, we use class names for all windows expect for
;; Java applications and GIMP.
(add-hook 'exwm-update-class-hook
          (lambda ()
            (unless (or (string-prefix-p "sun-awt-X11-" exwm-instance-name)
                        (string= "gimp" exwm-instance-name))
              (exwm-workspace-rename-buffer exwm-class-name))))
(add-hook 'exwm-update-title-hook
          (lambda ()
            (when (or (not exwm-instance-name)
                      (string-prefix-p "sun-awt-X11-" exwm-instance-name)
                      (string= "gimp" exwm-instance-name))
              (exwm-workspace-rename-buffer exwm-title))))

;; `exwm-input-set-key' allows you to set a global key binding (available in
;; any case). Following are a few examples.
;; + We always need a way to go back to line-mode from char-mode
(exwm-input-set-key (kbd "s-r") #'exwm-reset)
;; + Bind a key to switch workspace interactively
(exwm-input-set-key (kbd "s-w") #'exwm-workspace-switch)
;; + Bind "s-0" to "s-9" to switch to the corresponding workspace.
(dotimes (i 10)
  (exwm-input-set-key (kbd (format "s-%d" i))
                      `(lambda ()
                         (interactive)
                         (exwm-workspace-switch-create ,i))))
;; + Application launcher ('M-&' also works if the output buffer does not
;;   bother you). Note that there is no need for processes to be created by
;;   Emacs.
(exwm-input-set-key (kbd "s-&")
                    (lambda (command)
                      (interactive (list (read-shell-command "$ ")))
                      (start-process-shell-command command nil command)))

;; + 'slock' is a simple X display locker provided by suckless tools.
(exwm-input-set-key (kbd "s-<f2>")
                    (lambda () (interactive) (start-process "" nil "slock")))

;; The following example demonstrates how to set a key binding only available
;; in line mode. It's simply done by first push the prefix key to
;; `exwm-input-prefix-keys' and then add the key sequence to `exwm-mode-map'.
;; The example shorten 'C-c q' to 'C-q'.
(push ?\C-q exwm-input-prefix-keys)
(define-key exwm-mode-map [?\C-q] #'exwm-input-send-next-key)

;; The following example demonstrates how to use simulation keys to mimic the
;; behavior of Emacs. The argument to `exwm-input-set-simulation-keys' is a
;; list of cons cells (SRC . DEST), where SRC is the key sequence you press and
;; DEST is what EXWM actually sends to application. Note that SRC must be a key
;; sequence (of type vector or string), while DEST can also be a single key.
(exwm-input-set-simulation-keys
 '(
;; movement
;;     ([?\C-b] . left)
;;     ([?\M-b] . C-left)
;;     ([?\C-f] . right)
;;     ([?\M-f] . C-right)
;;     ([?\C-p] . up)
;;     ([?\C-n] . down)
;;     ([?\C-a] . home)
;;     ([?\C-e] . end)
;;     ([?\M-v] . prior)
;;     ([?\C-v] . next)
;;     ([?\C-d] . delete)
;;     ([?\C-k] . (S-end delete))
;; cut/paste.
     ([?\C-w] . ?\C-x)
     ([?\M-w] . ?\C-c)
     ([?\C-y] . ?\C-v)))
;; search
;;     ([?\C-s] . ?\C-f))
;; 
;; You can hide the mode-line of floating X windows by uncommenting the
;; following lines
;(add-hook 'exwm-floating-setup-hook #'exwm-layout-hide-mode-line)
;(add-hook 'exwm-floating-exit-hook #'exwm-layout-show-mode-line)

;; You can hide the minibuffer and echo area when they're not used, by
;; uncommenting the following line
;(setq exwm-workspace-minibuffer-position 'bottom)

;; Do not forget to enable EXWM. It will start by itself when things are ready.
;;(exwm-enable)
#+END_SRC
* 
