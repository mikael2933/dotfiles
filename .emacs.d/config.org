#+TITLE: Emacs configuration
#+AUTHOR: Mikael Zhang

* Emacs internal configuration
** Load library path ~/.emacs.d/lib/

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/lib/")
#+END_SRC

** Indent
#+BEGIN_SRC emacs-lisp
(setq tab-width 4)
#+END_SRC

** Unset Control Z

#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-z"))
#+END_SRC

** Find and replace Control C, Control s
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c C-s") 'query-replace)
#+END_SRC 

** Disable bars
Disable menu-, tool- and scroll-bar for more space
#+BEGIN_SRC emacs-lisp
;(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+END_SRC

** Truncate Lines

#+BEGIN_SRC emacs-lisp
(set-default 'truncate-line t)
#+END_SRC

** Saving Emacs Sessions - NOT IN USE
https://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Emacs-Sessions.html
#+BEGIN_SRC emacs-lisp
;;(desktop-save-mode 1)
#+END_SRC

** Don't ask follow symlinks
   https://emacs.stackexchange.com/questions/3673/how-to-make-vc-and-magit-treat-a-symbolic-link-to-a-real-file-in-git-repo-just
** AlarmBell
https://www.emacswiki.org/emacs/AlarmBell
* org-mode configuration
** Beamer org export

#+BEGIN_SRC emacs-lisp
(require 'ox-beamer)
#+END_SRC

** Support Shift Select

#+BEGIN_SRC emacs-lisp
(setq org-support-shift-select t)
#+END_SRC

** Syntax highlighting
https://orgmode.org/worg/org-contrib/babel/examples/fontify-src-code-blocks.html

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC

** LaTeX-pdf output on F10

#+BEGIN_SRC emacs-lisp
(org-defkey org-mode-map [f10] 'org-latex-export-to-pdf)
#+END_SRC

* org-bullets
https://github.com/sabof/org-bullets
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+END_SRC

* Theme and looks 
** Load ~/.emacs.d/themes
#+BEGIN_SRC emacs-lisp
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
#+END_SRC

** Highlight Line Mode
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode t)
#+END_SRC

** Spaceline
https://github.com/TheBB/spaceline

#+BEGIN_SRC emacs-lisp
  (require 'spaceline-config)
  (spaceline-emacs-theme)
  (setq powerline-default-separator nil)
  (spaceline-compile)
#+END_SRC

* YASnippet
https://github.com/joaotavora/yasnippet
#+BEGIN_SRC emacs-lisp
  (require 'yasnippet)
  (yas-global-mode 1)
#+END_SRC

* ob-sagemath
https://github.com/stakemori/ob-sagemath

#+BEGIN_SRC emacs-lisp
  ;; Ob-sagemath supports only evaluating with a session.
  (setq org-babel-default-header-args:sage '((:session . t)
					     (:results . "output")))

  ;; C-c c for asynchronous evaluating (only for SageMath code blocks).
  (with-eval-after-load "org"
    (define-key org-mode-map (kbd "C-c c") 'ob-sagemath-execute-async))

  ;; Do not confirm before evaluation
  (setq org-confirm-babel-evaluate nil)

  ;; Show images when opening a file.
  (setq org-startup-with-inline-images t)
#+END_SRC

** Sage-shell-mode derived

#+BEGIN_SRC emacs-lisp

#+END_SRC

https://www.gnu.org/software/emacs/manual/html_node/elisp/Derived-Modes.html

#+BEGIN_SRC emacs-lisp
  (define-derived-mode sage-mode sage-shell-mode "sage-block mode")
  (provide 'sage-mode)
#+END_SRC

* auto-complete
https://github.com/auto-complete/auto-complete
#+BEGIN_SRC emacs-lisp
(ac-config-default)
#+END_SRC

** auto-complete-sage
https://github.com/stakemori/auto-complete-sage
#+BEGIN_SRC emacs-lisp
(add-hook 'sage-shell:sage-mode-hook 'ac-sage-setup)
(add-hook 'sage-shell-mode-hook 'ac-sage-setup)
;; Show quick help
(setq ac-sage-show-quick-help t)
#+END_SRC

* Magit
https://github.com/magit/magit
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC

* Emacs-dashboard
https://github.com/rakanalh/emacs-dashboard

#+BEGIN_SRC emacs-lisp
  (require 'dashboard)
  (dashboard-setup-startup-hook)
  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
  (setq dashboard-items '((recents . 5)))
#+END_SRC

* Beacon
https://github.com/Malabarba/beacon
#+BEGIN_SRC emacs-lisp
(beacon-mode 1)
#+END_SRC

* linum-relative
https://github.com/coldnew/linum-relative

#+BEGIN_SRC emacs-lisp
  (require 'linum-relative)
  (global-set-key (kbd "C-<f9>") 'linum-relative-toggle)
#+END_SRC

* Helm
https://github.com/emacs-helm/helm/wiki#install
#+BEGIN_SRC emacs-lisp
(require 'helm-config)
#+END_SRC

** Find files
Set C-h C-f

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-h C-f") 'helm-find-files)
#+END_SRC

* God-mode

https://github.com/chrisdone/god-mode

#+BEGIN_SRC emacs-lisp
  (require 'god-mode)

  ;; Set ½ as toggle
  (global-set-key (kbd "C-½") 'god-mode-all)

  ;; If you are using the global mode, you might want to make no buffers exempt
  (setq god-exempt-major-modes nil)
  (setq god-exempt-predicates nil)
#+END_SRC

* Ace-window

https://github.com/abo-abo/ace-window

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-o") 'ace-window)
#+END_SRC

* Multiple cursors
https://github.com/magnars/multiple-cursors.el
#+BEGIN_SRC emacs-lisp
(require 'multiple-cursors)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-;") 'mc/mark-all-like-this)
#+END_SRC

* Swiper
https://github.com/abo-abo/swiper

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-s") 'swiper)
  (global-set-key (kbd "C-S-s") 'isearch-forward)
#+END_SRC

* Ivy
https://github.com/abo-abo/swiper

#+BEGIN_SRC emacs-lisp
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t)
  (global-set-key (kbd "C-c C-r") 'ivy-resume)
#+END_SRC

* Counsel
https://github.com/abo-abo/swiper

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  (global-set-key (kbd "<f1> f") 'counsel-describe-function)
  (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
  (global-set-key (kbd "<f1> l") 'counsel-find-library)
  (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
  (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
  (global-set-key (kbd "C-c g") 'counsel-git)
  (global-set-key (kbd "C-c j") 'counsel-git-grep)
  (global-set-key (kbd "C-c k") 'counsel-ag)
  (global-set-key (kbd "C-x l") 'counsel-locate)
  (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
  (global-set-key (kbd "M-y") 'counsel-yank-pop)
  (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-histor)
#+END_SRC

* Undo Tree
https://www.emacswiki.org/emacs/UndoTree

#+BEGIN_SRC emacs-lisp
  (global-undo-tree-mode)
#+END_SRC

* Aggressive Indent Mode
https://github.com/Malabarba/aggressive-indent-mode

#+BEGIN_SRC emacs-lisp
  (global-aggressive-indent-mode 1)
  (add-to-list 'aggressive-indent-excluded-modes 'haskell-mode)
#+END_SRC

* Expand Region
https://github.com/magnars/expand-region.el

#+BEGIN_SRC emacs-lisp
(require 'expand-region)
(global-set-key (kbd "C-=") 'er/expand-region)
#+END_SRC

* Git Gutter
https://github.com/syohex/emacs-git-gutter
#+begin_src emacs-lisp
  (global-git-gutter-mode +1)
  (global-set-key (kbd "C-x p") 'git-gutter:previous-hunk)
  (global-set-key (kbd "C-x n") 'git-gutter:next-hunk)
  (global-set-key (kbd "C-x v s") 'git-gutter:stage-hunk)
  (global-set-key (kbd "C-x v r") 'git-gutter:revert-hunk)
  (global-set-key (kbd "C-x v SPC") #'git-gutter:mark-hunk)
#+end_src

* Projectile
https://github.com/bbatsov/projectile
#+BEGIN_SRC emacs-lisp
  (projectile-global-mode)
#+END_SRC

* Counsel Projectile
https://github.com/ericdanan/counsel-projectile

* IBuffer
https://www.emacswiki.org/emacs/IbufferMode
http://martinowen.net/blog/2010/02/03/tips-for-emacs-ibuffer.html
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (setq ibuffer-saved-filter-groups
	'(("home"
	   ("dired" (mode . dired-mode))
	   ("org" (name . "^.*org$"))
	   ("web" (or (mode . web-mode) (mode . js2-mode)))
	   ("shell" (or (mode . eshell-mode) (mode . shell-mode)))
	   ("mu4e" (name . "\*mu4e\*"))
	   ("programming" (or
			   (mode . python-mode)
			   (mode . c++-mode)
			   (mode . haskell-mode)
			   (mode . emacs-lisp-mode)))
	   ("emacs" (or
		     (name . "^\\*scratch\\*$")
		     (name . "^\\*Messages\\*$")))
	   )))
  (add-hook 'ibuffer-mode-hook
	    '(lambda ()
	       (ibuffer-auto-mode 1)
	       (ibuffer-switch-to-saved-filter-groups "home")))
#+END_SRC

* Smartparens
https://github.com/Fuco1/smartparens

#+BEGIN_SRC emacs-lisp
  (require 'smartparens-config)
#+END_SRC

* Flycheck
http://www.flycheck.org/en/latest/

#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook #'global-flycheck-mode)
#+END_SRC

* HideShow
https://www.emacswiki.org/emacs/HideShow

#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'hs-minor-mode)
#+END_SRC

* All the Icons
https://github.com/domtronn/all-the-icons.el
#+begin_src emacs-lisp
  (require 'all-the-icons)
#+end_src

* Anzu
https://github.com/syohex/emacs-anzu

#+BEGIN_SRC emacs-lisp
(global-anzu-mode +1)
#+END_SRC

* Rainbow Delimiters
https://www.emacswiki.org/emacs/RainbowDelimiters

#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'rainbow-delimiters-mode)
(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
#+END_SRC

* Org-ref
https://github.com/jkitchin/org-ref

#+BEGIN_SRC emacs-lisp
  (require 'org-ref)
#+END_SRC

* ox-hugo
https://github.com/kaushalmodi/ox-hugo

#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'ox
  (require 'ox-hugo))
#+END_SRC
* Haskell-ide-engine / lsp-haskell
https://github.com/haskell/haskell-ide-engine
https://github.com/emacs-lsp/lsp-haskell

#+BEGIN_SRC emacs-lisp
(require 'lsp-ui)
(require 'lsp-haskell)
(add-hook 'lsp-mode-hook 'lsp-ui-mode)

(add-hook 'haskell-mode-hook #'lsp-haskell-enable)
(add-hook 'haskell-mode-hook 'flycheck-mode)
#+END_SRC
* helm-org-rifle 
https://github.com/alphapapa/helm-org-rifle

#+BEGIN_SRC emacs-lisp
(require 'helm-org-rifle)
#+END_SRC
* lsp-python
https://github.com/emacs-lsp/lsp-python

#+BEGIN_SRC emacs-lisp
(require 'lsp-mode)
(require 'lsp-python)
(add-hook 'python-mode-hook #'lsp-python-enable)
#+END_SRC

* 
