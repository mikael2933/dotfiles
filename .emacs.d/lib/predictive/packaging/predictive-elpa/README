   The package adds a new predictive completion minor-mode, called
"predictive" mode, to the GNU Emacs editor. Although there are many
options and customizations, the easiest way to start using it is to
simply install the package (*note Obtaining and Installing::), turn on
the minor-mode by running the `predictive-mode' command, and start
typing. Then come back and read up on how to tailor it to your liking.  

This documentation is an extract from the extensive Predictive
Completion Manual that comes with the package. For much more detailed
information on how to use predictive-mode and (especially) customizing
it to your tastes, please read the manual.


1 What is predictive completion?
********************************

The languages we use to communicate contain a large amount of
redundancy. Given the first few letters of a word, for instance, it's
not too difficult to predict what should come next. Try it! You can
probably easily guess how to fill in the missing letters in the
following sentence:

     Giv th fir fe lett o a wor i no diffi t predi wh shou com nex.

   This is even more true of the languages used to communicate with
computers, which typically have very restricted vocabularies and rigidly
defined grammars. Redundancy occurs on many levels: on the level of
individual characters (as illustrated above), on the level of words (we
can often predict quite accurately what words are likely to come next in
a sentence, based on grammar and usage), and perhaps even on higher
levels. Predictive completion exploits this redundancy by attempting to
complete what you are trying to type before you've finished typing it.

   The predictive completion package described here is an add-on to the
GNU Emacs editor, which implements a new minor-mode called
`predictive-mode' (*note Minor Modes: (emacs)Minor Modes.). When this
predictive completion minor-mode is switched on, Emacs will try to
complete the word you are typing based on the characters typed so far.
As you add characters, it can look up words starting with those
characters in a dictionary, and offer to insert the most likely ones.
How you choose which completion (if any) to insert depends on various
customization settings, some more intrusive than others.

   Note that by only taking into account characters belonging to the
current word when predicting how to complete it, much of the redundancy
in language remains unexploited. This limitation is partly for
simplicity, but also because some of the benefits of predictive
completion would be lost if context (i.e. the preceding words and
sentences) was also taken into account.

What benefits does predictive completion bring?

  1. Saving on typing (obviously!): you don't have to type the whole
     word.  

  2. Automatic spelling assistance: when you type the first few
     characters of a word, only correct spellings of the whole word are
     offered. This is not only useful for human languages. The
     predictive completion mode can be set up to complete on variable
     and function names in a program, helping avoid bugs due to
     misspelled names.  

  3. Faster typing (possibly): not quite the same as point 1. As you
     get used to predictive completion, your fingers will start to
     learn the key sequences required for frequently used words. And
     these key sequences will usually be much shorter than typing the
     full word. (This is one reason for not taking context into
     account. If we did, the same word might require different key
     sequences depending on the words and sentences preceding it.)  

   Whether predictive mode really speeds up typing or not is debatable.
At the very least it depends on the context in which predictive mode is
used. Although you have to type less, you have to process more
information as you type, to decide whether to accept the offered
completion or whether to add more characters to narrow down the
completions to word you want. And this increased "cognitive load" might
wipe out the advantage of having to type fewer characters. Studies
indicate that the cognitive load does increase, but whether or not this
negates all speed advantage to predictive completion systems is less
clear. It seems plausible that the more you use predictive mode, the
better you will become at quickly evaluating the possible completions.
Also, with the default settings, there is nothing to stop you typing
normally and ignoring the completions entirely until you want to make
use of them. In the end, the only way to find out is to try it and see!

2 Obtaining and Installing
**************************

The current version of the predictive completion package can be obtained
from `http://www.dr-qubit.org/emacs.php'.

2.1 Before upgrading
====================

If you are upgrading from a previous version, make sure you first backup
all the dictionaries you use by dumping the words and data they contain
to files (unless you want to start from scratch). To make the backups,
use `predictive-dump-dict-to-file'. *Note Loading and Saving
Dictionaries::. It is _not_ enough to make a copy of the dictionary
file. Only the plain-text "dumped" format is guaranteed to be portable
across different versions of predictive mode. (However, see *note
Upgrading from very old versions::.)

   If you are upgrading to a different version of Emacs, but continuing
to use the same version of predictive mode, then it is sufficient to
delete the compiled dictionary files (extension `.elc', but make sure
you do _not_ delete the uncompiled files with extension `.el'!), and
let predictive mode recompile them automatically when the dictionaries
are saved. (However, see *note Upgrading from very old versions::.)

   In principle, simply deleting the compiled dictionary files may be
sufficient even when upgrading predictive mode. However, backing up your
dictionaries by dumping them to plain-text files, as described above, is
still a very good idea (just to be on the safe side!).

2.2 Installing
==============

To install the package, extract the files using `tar -xvzf
predictive.tar.gz'. This will unpack the files in a new directory called
`predictive/'. Now byte-compile all the Lisp files and create the
required dictionaries by running `make' in the `predictive/' directory.
If necessary, you can specify explicitly where your Emacs resides with
`make EMACS=/path/to/emacs'.

   Then run `make install' to copy the package files to
`~/.emacs.d/predictive/' (the `~/.emacs.d/' directory will be created
if it doesn't already exist). If you want to install the files
elsewhere, you can change the default install location using `make
install DESTDIR=/PATH/TO/INSTALL/' and the package files will be copied
to the `/path/to/install/' directory.

   The dictionaries are intended to be user-specific, and _must_ be
writable by your user. If you're performing a site-wide installation of
the predictive package, the dictionary files (all files starting with
the prefix `dict-' and ending in `.elc' or `.el', _except_
`dict-tree.el') need to be copied to a separate writable directory for
each user. For this reason, the dictionaries will still be installed
under `~/.emacs.d/predictive/' even if `DESTDIR' is specified. (You
will have to copy them manually for any other users who want to use
predictive.) If you want to change the dictionary install location, use
`make install DICTDIR=/path/to/dictionaries/'. This can of course be
combined with the `DESTDIR' option: `make install
DESTDIR=/path/to/install/ DICTDIR=/path/to/dictionaries/'.

   Finally, put the following lines in your .emacs file (replace the
paths as appropriate if you're not using the default install locations):

     ;; predictive install location
     (add-to-list 'load-path "~/.emacs.d/predictive/")
     ;; dictionary locations
     (add-to-list 'load-path "~/.emacs.d/predictive/latex/")
     (add-to-list 'load-path "~/.emacs.d/predictive/texinfo/")
     (add-to-list 'load-path "~/.emacs.d/predictive/html/")
     ;; load predictive package
     (require 'predictive)

   Alternatively, you can save memory and only load the lisp libraries
when they're needed (i.e. when you first run the `predictive-mode'
command), by replacing the final line as follows:

     ;; predictive install location
     (add-to-list 'load-path "~/.emacs.d/predictive/")
     ;; dictionary locations
     (add-to-list 'load-path "~/.emacs.d/predictive/latex/")
     (add-to-list 'load-path "~/.emacs.d/predictive/texinfo/")
     (add-to-list 'load-path "~/.emacs.d/predictive/html/")
     ;; load predictive package
     (autoload 'predictive-mode "~/.emacs.d/predictive/predictive"
               "Turn on Predictive Completion Mode." t)

   If you want to install the info documentation into your local info
system, you should run the following command _as root_: `make
info-install'. If your info `dir' file is not located in
`/usr/share/info/', then you can specify its location using `make
info-install INFODIR=/path/to/info/'.

   For more details, and for alternative installation options, you
should consult the `INSTALL' file included in the predictive package.

2.3 Upgrading from very old versions
====================================

Very old versions of predictive mode (version 0.21 and earlier, or more
specifically versions of the `dict-tree.el' library prior to 0.12) use
a different format than the current version, _even_ for the "dumped"
files! To port a dictionary from old versions to this version, use the
following procedure:

  1. Backup the dictionay using `predictive-dump-dict-to-file' as just
     described, _using the old version of the predictive package_.

  2. Start Emacs.

  3. Load the `predictive-convert-dump-format' library (included in this
     version of the predictive completion package) using `M-x load-file
     /path/to/predictive-convert-dump-format.el'.

  4. Open the "dumped" dictionary backup file in Emacs.

  5. Run the `predictive-convert-dump-format' command.

  6. Recreate the dictionary using the `predictive-create-dict' command
     (*note Creating Dictionaries::).

   Repeat this procedure for each dictionary that you want to port over
to the new version of predictive mode.

   Older versions of predictive mode only saved dictionaries in a
compiled form that was not guaranteed to be portable across different
versions of Emacs. Even if you're upgrading from a version of
predictive mode newer than 0.21, if you do not have uncompiled versions
of the dictionaries (file extension `.el'), but only compiled versions
(file extension `.elc'), then you need to dump all your dictionaries to
file _before_ upgrading using `predictive-dump-dict-to-file', and
recreate the dictionaries after upgrading using
`predictive-create-dict'. *Note Loading and Saving Dictionaries::.

   Newer versions of predictive mode save dictionaries in both compiled
and uncompiled formats by default. However, it is still strongly
recommended to backup your dictionaries using
`predictive-dump-dict-to-file' before upgrading.

3 Quick-Start
*************

This "Quick-Start" describes the default behaviour. However, predictive
completion mode can be heavily customized, allowing its behaviour to be
radically changed. The many and various predictive completion mode
customization options can be found in the `predictive' and
`completion-ui' customization groups. If you like the idea of
predictive completion, but don't like the way it works "out-of-the-box"
the rest of this manual explains all the options and features in detail.

   Use the `predictive-mode' command to switch the predictive
minor-mode on. The same command will also switch it off again. This
section only covers (some of) the _default_ behaviour of predictive
mode. The way that predictive mode works can be radically changed via
numerous customization options, which are described in detail in the
rest of this manual.  

   Note that when you use a brand new dictionary with predictive mode
for the first time, there may be a short delay when completing short
strings of one or two letters. This delay will only occur the very
first time you try to complete that string. The delay will go away
entirely the next time you type the same string of letters, and every
other time thereafter. The reason for this is that predictive mode
defers constructing some parts of the underlying data structures until
you use the dictionaries. This allows it to optimise the data
structures for your computer, and avoid wasting memory unnecessarily.
See `predictive-completion-speed' under *note Creating Dictionaries::
for more information. If you think predictive mode is slow at finding
completions, make sure that you can reproduce this more than once before
reporting a bug. (*Note Non-Bugs::.)

   As you add characters to a word, predictive mode searches in a
dictionary for words starting with those characters. There are a number
of different ways to choose which word (if any) should be used to
complete what you've typed.

   The most likely completion is provisionally inserted in the buffer
after the point, and highlighted to indicate that it has not yet been
accepted. The most likely completion is updated as you add more
characters to the word. Use `C-RET' to accept a completion. To reject
the current completion and delete the provisional completion from the
buffer, you can either type any non-letter character, or hit any of
`C-DEL' (usually the same as `C-Backspace'), `C-SPC' or `C-q'. *Note
Dynamic Completion::, for details.  

   What if you don't want to use the most likely completion? As you
type, a list of the ten most likely completions is displayed in the
echo area and, after a short delay, in a tooltip. They are ranked
according to likelihood. Typing a number `0'-`9' will insert the
corresponding completion. *Note Completion Hotkeys::, *note Displaying
Completions in the Echo Area::, and *note Completion Tooltip:: for
details.  

   You can also display the completion tooltip manually, using
`S-down'. When the tooltip is displayed, the `up' and `down' keys can
be used to select a completion from the list in tooltip.  

   You can cycle forwards and backwards through the available
completions even when the tooltip isn't displayed, using `M-TAB' or
`M-/' and `M-SHIFT-TAB' or `M-?'. As you cycle, the next completion is
provisionally inserted after the point and highlighted. `C-RET' accepts
the completion, as usual.  

   Hitting `TAB' whilst completing will perform traditional
"tab-completion" on the word: the word will be completed up to the
longest common prefix of the available completions.  

   Another useful command is `C-TAB'. This accepts all the characters
from the current provisional completion as though you typed them
yourself, and re-completes the resulting, longer string -- useful if a
word just needs a suffix adding, for instance.  

   *Note Basic Completion Commands::, for details of cycling and
tab-completion.  

   `M-Down' will display a menu from which you can select a completion
(*note Completion Menu and Browser::). There is also a `Browser' menu
item, which brings up the completion browser. This hierarchically lists
_all_ possible completions, not just the most likely ones. (It can
sometimes take a while to construct the completion browser, but you can
hit `C-g' at any time to cancel it). *Note Completion Menu and
Browser::, for details.  

   `C-Down' displays a pop-up frame, in which you can use the usual
Emacs motion keys to select a completion. `M-Tab' or `M-/' in the
pop-up frame toggles between displaying the most likely completions and
displaying all possible completions. To get rid of the pop-up frame,
use `C-Up'.  

   The predictive completion package comes with an English dictionary,
which is used by default. However, this is only really included to make
sure everything works "out of the box". This default dictionary has
already been trained on a large body of English text, which means it
will take a very long time to adapt to your individual writing style.
Don't expect predictive completion mode to display particularly good
predictive powers if you stick to the default dictionary! For better
results, you should create your own dictionary (based on the supplied
one if you like), and train it on samples of your own writing.  *Note
Dictionaries::.

4 Completing Words
******************

The minor-mode command `predictive-mode' toggles the mode on and off.
With a positive prefix argument it switches the mode on, whilst a
negative prefix argument turns it off and a zero prefix argument
toggles. The `turn-on-predictive-mode' is also provided as a
convenience for use in hooks.  

4.1 Overview
============

Predictive mode is extremely flexible, and how you interact with it
depends heavily on how you customize it. Broadly, there are two and a
half ways to use predictive mode: it can either do nothing until you ask
it to complete a word, or it can automatically search for the most
likely completions as you type. (You may have seen something similar to
the latter on certain models of mobile phone, though predictive mode is
far more powerful.) This behaviour is controlled by enabling or
disabling `auto-completion-mode' (*note Auto-Completion Mode::). It is
enabled for you automatically if the `predictive-auto-complete'
customization option is enabled (the default).

   The half-a-way to use predictive mode is to set
`predictive-auto-correction-no-completion'. In that case, predictive
mode doesn't complete words at all, it only auto-corrects words you
typed. For this to be useful, you also have to customize a number of
options appropriately. *Note Miscellaneous Options::.

   Even if you are using `auto-completion-mode', you can (by default)
continue to type normally. Possible completion candidates will be
displayed, ranked in order of likelihood, but will not be accepted
unless you do so explicitly using `completion-accept', bound to
`C-RET'. (All the key bindings described here are the defaults, and can
of course be customized to anything you desire in the usual way, *note
Keymaps and Key Bindings::) However, since it learns as you type,
predictive mode can become very good at predicting the word you want,
and it can become tedious to have to hit `C-RET' all the time. In that
case, you can customize `auto-completion-syntax-alist' so that typing a
punctuation or white-space character automatically accepts the current
completion (before inserting the punctuation character). This lets you
skip typing the rest of the characters in a word as soon as predictive
mode has found the completion you want. However, the down side is that
you have to slightly change the way you type, and it can take a little
while until your fingers "get used to it". If you need to reject a
completion candidate, you can do so using `C-DEL' or `C-SPC' (`DEL' is
usually the `backspace' key).  

   If you aren't using `auto-completion-mode', you will need to call
the `complete-predictive' command whenever you want to complete the
word at or next to the point. This is bound to `M-TAB', `M-SHIFT-TAB',
`M-/' and `M-?'. There are then two "styles" of behaviour: completions
can either be ephemeral, acting purely as a visual indicator, and
disappearing unless you explicitly accept them using
`completion-accept', bound to `C-RET'. (You may be used to this style
of behaviour from word processing software such as OpenOffice Writer).
Alternatively, completions can be permanent, so that completing a word
really does insert those characters into the buffer unless you
explicitly reject it using `completion-reject', bound to `C-DEL'. (This
is the more traditional Emacs-style behaviour, that you may be used to
from using `dabbrev's, for example.) The choice is yours, and is
controlled by the `completion-accept-or-reject-by-default'
customization option (*note Miscellaneous Options::). (Note that these
two different "styles" of behaviour are mainly relevant when Dynamic
Completion is enabled, as it is by default. This is described below.)  

   Whether you are using `auto-completion-mode' or not, there are
various ways to display and select completions. All of them can be
enabled or disabled indepentently, and many of them can be extensively
customized.

   Perhaps the simplest is to display the most likely completion in the
buffer (*note Dynamic Completion::). You can then cycle through the
other completion candidates using the `completion-cycle' command.
`M-TAB' and `M-/' cycle forwards, whereas `M-SHIFT-TAB' and `M-?' cycle
backwards. (These are the same key bindings used to manually complete
the word at the point. Hitting them for the first time will bring up
the possible completions, hitting them again will cycle.)

   You can also insert a completion candidate directly, without having
to cycle through them until you get to the one you want, by using a
completion hot-key (*note Completion Hotkeys::). By default, the
hot-keys are the number keys `0'-`9', which insert the first through to
the tenth candidate, respectively.

   Of course, you won't know which completion candidate you want unless
you can see which candidates are available! The completion candidates
can be displayed in the echo area, and/or in a tooltip below the point
(*note Displaying Completions in the Echo Area::, and *note Completion
Tooltip::). When completion hot-keys are enabled, both of these also
indicate which completion candidate corresponds to which hot-key. If you
only want the hotkeys to be enabled when the tooltip or pop-up frame
(see below) are displayed, then set `completion-use-hotkeys' to
`pop-up'.

   The completion tooltip is more than just a visual reminder of which
completions are available. When it is displayed, you can select a
completion from the list using the `up' and `down' arrow keys.  When
completing a word, you can display the tooltip at any time using
`completion-show-popup-tip', bound to `S-down'.  *Note Completion
Pop-Up Tooltip::.

   A slightly more powerful alternative to the completion tooltip is a
pop-up frame, displayed using `completion-popup-frame', bound to
`C-down' (*note Pop-Up Frame::). This lists the completion candidates
in a separate Emacs frame positioned below the point, and you can use
the usual Emacs motion keys to move through the list and select a
candidate. However, you can also toggle between displaying just the
most likely completion candidates and displaying all possible
completions, using `completion-popup-frame-toggle-all', bound to
`M-Tab' and `M-/'. You can still type and delete characters when the
pop-up frame is displayed; it will be updated to reflect the new set of
completion candidates. To get rid of a pop-up frame, use
`completion-popup-frame-dismiss', bound to `C-up' and `M-up'. (Note
that the pop-up frame key bindings are only active when the pop-up
frame has the focus. If you manually switch the focus back to the
original frame, you can still type normally and the pop-up frame will
be updated appropriately, but the `completion-popup-frame-toggle-all'
and `completion-popup-frame-dismiss' bindings will not work.)

   The completion menu is the most flexible way of selecting
completions, and can be displayed using `completion-show-menu', bound to
`M-down'. Again, it displays the completion candidates and lets you
select them, and, like the pop-up frame, it also allows you to see all
possible completions, rather than just displaying the most likely ones,
by selecting the `Browser' item from the menu. The completion browser
doesn't just display all possible completions in a big list. Instead,
it organises them hierarchically, making it easier to browse through
them until you find the one you want.

   The completion tooltip, pop-up frame, and menu all display a list of
completion candidates, but each has its own advantages and
disadvantages. The tooltip is visually and functionally least intrusive,
but also gives you fewer ways to find the completion you want. The
pop-up frame is encumbered by your window manager's frame decoration and
positioning policy (though some window managers allow you to disable
this for specific windows - called frames in Emacs). But it can display
large numbers of completion candidates far more effectively than a
tooltip. The completion menu and completion browser make finding the
desired completion much easier, especially when you're not sure
precisely what it is you're looking for. But menus steal the keyboard
focus in Emacs, so you can no longer type in the buffer until you
dismiss the menu.

   You can select one of these three (pop-up tooltip, tooltip, pop-up
frame or menu) to be displayed automatically when you complete a word,
by setting the `completion-auto-show' customization option. You can
optionally leave a short delay before it is displayed, by setting
`completion-auto-show-delay'(1).

   ---------- Footnotes ----------

   (1) Although you can choose to display the completion menu
automatically, because it steals the keyboard focus this probably isn't
all that useful, at least not without a long delay.

